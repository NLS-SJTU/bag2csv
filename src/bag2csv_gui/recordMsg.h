// Generated by gencpp from file bag2csv/recordMsg.msg
// DO NOT EDIT!


#ifndef BAG2CSV_MESSAGE_RECORDMSG_H
#define BAG2CSV_MESSAGE_RECORDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bag2csv
{
template <class ContainerAllocator>
struct recordMsg_
{
  typedef recordMsg_<ContainerAllocator> Type;

  recordMsg_()
    : playRate(0.0)
    , bagName()
    , savePath()
    , recordIMU(false)
    , recordStereo(false)
    , recordRgbd(false)
    , recordLidar(false)
    , recordPixhawkIMU(false)
    , recordPx4flow(false)
    , recordVicon(false)
    , recordRtk(false)  {
    }
  recordMsg_(const ContainerAllocator& _alloc)
    : playRate(0.0)
    , bagName(_alloc)
    , savePath(_alloc)
    , recordIMU(false)
    , recordStereo(false)
    , recordRgbd(false)
    , recordLidar(false)
    , recordPixhawkIMU(false)
    , recordPx4flow(false)
    , recordVicon(false)
    , recordRtk(false)  {
  (void)_alloc;
    }



   typedef float _playRate_type;
  _playRate_type playRate;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bagName_type;
  _bagName_type bagName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _savePath_type;
  _savePath_type savePath;

   typedef uint8_t _recordIMU_type;
  _recordIMU_type recordIMU;

   typedef uint8_t _recordStereo_type;
  _recordStereo_type recordStereo;

   typedef uint8_t _recordRgbd_type;
  _recordRgbd_type recordRgbd;

   typedef uint8_t _recordLidar_type;
  _recordLidar_type recordLidar;

   typedef uint8_t _recordPixhawkIMU_type;
  _recordPixhawkIMU_type recordPixhawkIMU;

   typedef uint8_t _recordPx4flow_type;
  _recordPx4flow_type recordPx4flow;

   typedef uint8_t _recordVicon_type;
  _recordVicon_type recordVicon;

   typedef uint8_t _recordRtk_type;
  _recordRtk_type recordRtk;




  typedef boost::shared_ptr< ::bag2csv::recordMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bag2csv::recordMsg_<ContainerAllocator> const> ConstPtr;

}; // struct recordMsg_

typedef ::bag2csv::recordMsg_<std::allocator<void> > recordMsg;

typedef boost::shared_ptr< ::bag2csv::recordMsg > recordMsgPtr;
typedef boost::shared_ptr< ::bag2csv::recordMsg const> recordMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bag2csv::recordMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bag2csv::recordMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bag2csv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'bag2csv': ['/home/zhouqiang/catkin_ws_datasets/src/bag2csv/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bag2csv::recordMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bag2csv::recordMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bag2csv::recordMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bag2csv::recordMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bag2csv::recordMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bag2csv::recordMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bag2csv::recordMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad238b12be40a24d18be1c6d53653d6e";
  }

  static const char* value(const ::bag2csv::recordMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad238b12be40a24dULL;
  static const uint64_t static_value2 = 0x18be1c6d53653d6eULL;
};

template<class ContainerAllocator>
struct DataType< ::bag2csv::recordMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bag2csv/recordMsg";
  }

  static const char* value(const ::bag2csv::recordMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bag2csv::recordMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 playRate\n\
string bagName\n\
string savePath\n\
bool recordIMU\n\
bool recordStereo\n\
bool recordRgbd\n\
bool recordLidar\n\
bool recordPixhawkIMU\n\
bool recordPx4flow\n\
bool recordVicon\n\
bool recordRtk\n\
\n\
";
  }

  static const char* value(const ::bag2csv::recordMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bag2csv::recordMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.playRate);
      stream.next(m.bagName);
      stream.next(m.savePath);
      stream.next(m.recordIMU);
      stream.next(m.recordStereo);
      stream.next(m.recordRgbd);
      stream.next(m.recordLidar);
      stream.next(m.recordPixhawkIMU);
      stream.next(m.recordPx4flow);
      stream.next(m.recordVicon);
      stream.next(m.recordRtk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct recordMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bag2csv::recordMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bag2csv::recordMsg_<ContainerAllocator>& v)
  {
    s << indent << "playRate: ";
    Printer<float>::stream(s, indent + "  ", v.playRate);
    s << indent << "bagName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bagName);
    s << indent << "savePath: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.savePath);
    s << indent << "recordIMU: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordIMU);
    s << indent << "recordStereo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordStereo);
    s << indent << "recordRgbd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordRgbd);
    s << indent << "recordLidar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordLidar);
    s << indent << "recordPixhawkIMU: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordPixhawkIMU);
    s << indent << "recordPx4flow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordPx4flow);
    s << indent << "recordVicon: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordVicon);
    s << indent << "recordRtk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recordRtk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAG2CSV_MESSAGE_RECORDMSG_H
